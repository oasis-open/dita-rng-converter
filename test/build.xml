<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="run-all-tests" name="dita-doctypes-tester">
    
  <property environment="env"/>

  <property name="ditaver" description="The DITA version to generate (1.2, 1.3, etc.)"
     value="2.0"
  />
  
  <property name="basedocsSubdir" value=""/>
  
  
  <condition property="testOutputDir" description="The directory to put all output into."
    value="${outdir}"
    >
    <isset property="outdir"/>
  </condition>
  <property name="testOutputDir" value="${basedir}/temp"/>
  <echo>testOutputDir=${testOutputDir}</echo>
  
  <property name="toolsDir" location="${basedir}/../tools"/>
  <property name="javaLibDir" location="${toolsDir}/lib"/>
  <property name="saxonDir" location="${javaLibDir}/saxon"/>
  
  <property name="toolsRngDir" location="${toolsDir}/relaxng"/>
  <property name="doctypesSrcDir" location="${basedir}/../src"/>

  
  <property name="debug" value="false"/>
  <property name="info" value="false"/>

  <property name="baseDocsDir" 
    description="Directory that contains the base documents from which validable docs are generated"
    location="${basedir}/${ditaver}/basedocs"
  />
  <property name="docsToValidateDir" description="Directory to contain generated docs for validation process"
    location="${testOutputDir}/${ditaver}/testdocs"
  />
  
  <!-- Because properties specified on the command line, in particular, outdir, cannot
       be overridden from a nested <ant> call, the generatedDtdsDir has to be
       the same as what the DTD-generation Ant script gets from the value of
       ${outdir}
    -->
  <property name="generatedDtdsDir" description="Directory into which the DTDs are generated"
    location="${testOutputDir}"
  />
  
  <property name="catalogOutDir" description="Directory to hold the XML entity resolution catalogs"
    location="${testOutputDir}/${ditaver}"
  />
  
  <property name="resultCatalogPath" location="${catalogOutDir}/catalog.xml"/>
  <echo>resultCatalogPath="${resultCatalogPath}"</echo>
  
  <path id="resultCatalogPath">
    <pathelement location="${resultCatalogPath}"/>
  </path>
  
  <path id="saxonClasspath">
    <fileset dir="${saxonDir}" >
      <include name="saxon9*.jar"/>
    </fileset>
    <fileset dir="${javaLibDir}" >
      <include name="jing.jar"/>
      <include name="resolver.jar"/>
    </fileset>
  </path>
  
  <record name="test-all.log" description="Log file for the entire test run."/>

  <target name="init">
    <buildnumber/>
    <tstamp/>
  </target>

  <tstamp>
    <format property="build-date-time"
             pattern="yyyy-MM-dd HH:mm:SSS z"/>
  </tstamp>
  
 <target name="run-all-tests" description="Run all the document type tests"
    depends="init, clean, generate-dtds-and-schemas, validate-results"
   />
  
 <target name="clean" description="Clean up the output directory">
   <delete dir="${testOutputDir}" failonerror="false" includeemptydirs="true">
   </delete>
 </target>
  
 <target name="generate-dtds-and-schemas" description="Generate all the DTDs and XSDs" 
   depends="init">
   <!-- NOTE: We don't depend on clean because there might be times we need to manually
        set things up before testing this target in isolation. The main test target
        calls clean.
     -->
   <record name="generate-dtds-and-schemas.log"/>
   
   <ant antfile="${toolsRngDir}/build.xml"
     inheritall="false"
     target="generate-all"
     >
     <property name="catalogOutDir" location="${catalogOutDir}"/>
     <property name="generateModules" value="true"/>
     <property name="generateCatalogs" value="true"/>
     <property name="generateStandardModules" value="true"/>
   </ant>
   <record name="generate-dtds-and-schemas.log" action="stop"/>
   <!-- Now just copy the RNG directory to the output so we can validate against
        it as well.
     -->
   <copy todir="${testOutputDir}/${ditaver}/rng">
     <fileset dir="${doctypesSrcDir}/${ditaver}/rng">
       <include name="**/*"/>
     </fileset>
   </copy>
 </target>
  
 <target name="validate-results" 
   depends="init, validate-dtds-using-xslt, 
   validate-dtds-using-xmlvalidate, 
   validate-xsds-using-xmlvalidate
   ">
 </target>
  
 <target name="clean-test-dirs" description="Clean up the temp areas used for testing">
   <delete failonerror="false" includeemptydirs="true">
     <fileset dir="${docsToValidateDir}">
      <include name="**/*"/>
     </fileset>
   </delete>
 </target>
  
 <target name="generate-test-docs" description="Generate the schema-specific docs used in the validation tests"
   depends="init, clean-test-dirs"
  >
   <record name="generate-test-docs.log"/>
   <!-- Generate Valid docs: -->
   <mkdir dir="${testOutputDir}"/>
   <xslt
     in="${baseDocsDir}/valid/basedocs.root"
     out="${testOutputDir}/validdoc-generation-manifest.xml"
     style="tools/xsl/testdoc-generator/testdoc-generator.xsl"
     classpathref="saxonClasspath"
     force="true"
     >
     <factory name="net.sf.saxon.TransformerFactoryImpl"/>     
     <param name="outdir" expression="${docsToValidateDir}/valid"/>
     <param name="debug" expression="${debug}"/>
   </xslt>
   <copy todir="${docsToValidateDir}/valid/dtd">
     <fileset dir="${baseDocsDir}/valid">
       <include name="basedocs.root"/>
     </fileset>
   </copy> 
   <copy todir="${docsToValidateDir}/valid">
     <fileset dir="${baseDocsDir}">
       <include name="media/**/*"/>
     </fileset>
   </copy> 
   
   <copy todir="${docsToValidateDir}/valid/dtd" 
         file="${baseDocsDir}/invalid/basedocs.root"
   />
   <!-- Generate invalid docs: -->
   <xslt
     in="${baseDocsDir}/invalid/basedocs.root"
     out="${testOutputDir}/invaliddoc-generation-manifest.xml"
     style="tools/xsl/testdoc-generator/testdoc-generator.xsl"
     classpathref="saxonClasspath"
     force="true"
     >
     <factory name="net.sf.saxon.TransformerFactoryImpl"/>
     <param name="outdir" expression="${docsToValidateDir}/invalid"/>
     <param name="debug" expression="${debug}"/>
   </xslt>
   <record name="generate-test-docs.log" action="stop"/>   
 </target>

  <target name="validate-dtds-using-xslt" depends="init, generate-test-docs"
    description="Validates the DTDs using XSLT, which will attempt to parse all the input docs and report errors for those that fail"
    >
    <record name="validate-dtds-using-xslt.log"/>
    <echo>catalog path=${resultCatalogPath}</echo>
    <!-- NOTE: The direct output of this transform is the validation report and we want it to
         go to the Ant log, not to a file, since we inspect the Ant log to determine
         test success and failure.
      -->
    <!-- NOTE: Using direct java call rather than Ant <xslt> task so that we have complete
               control over the Saxon invocation details.
      -->
    <java classname="net.sf.saxon.Transform"
      classpathref="saxonClasspath"
     >
      <arg line="-s:${docsToValidateDir}/valid/dtd/basedocs.root"/>
      <arg line="-xsl:${basedir}/tools/xsl/validator/validator.xsl"/>
      <arg line="-catalog:${resultCatalogPath}"/>
      <arg line="basedocsSubdir=${basedocsSubdir}"/>
    </java>
    <record name="validate-dtds-using-xslt.log" action="stop"/>
  </target>
  
  <target name="validate-dtds-using-xmlvalidate" depends="init, generate-test-docs"
    description="Validates the docs against the DTDs using normal XML parser validation. Fails utterly on any DTDs that don't parse"
    >
    <record name="validate-dtds-using-xmlvalidate.log"/>
    
    <xmlvalidate failonerror="no" warn="yes" classpathref="saxonClasspath">
      <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
      <fileset dir="${docsToValidateDir}/valid/dtd">
        <include name="**/*.xml"/>
        <include name="**/*.dita"/>
        <include name="**/*.ditamap"/>
        <include name="**/*.ditaval"/>
      </fileset>
      <xmlcatalog>
        <catalogpath refid="resultCatalogPath"/>
      </xmlcatalog>
    </xmlvalidate>
    <record name="validate-dtds-using-xmlvalidate.log" action="stop"/>
    
  </target>
  <target name="validate-xsds-using-xmlvalidate" depends="init, generate-test-docs"
    description="Validates the docs against the XSDs using normal XML parser validation. "
    >
    <record name="validate-xsds-using-xmlvalidate.log"/>
    <echo>
      Validating URN-based XSDs...
    </echo>
    <schemavalidate failonerror="no" warn="yes" classpathref="saxonClasspath">
      <fileset dir="${docsToValidateDir}/valid/xsdUrn">
        <include name="**/*.xml"/>
        <include name="**/*.dita"/>
        <include name="**/*.ditamap"/>
        <include name="**/*.ditaval"/>
      </fileset>
      <xmlcatalog>
        <catalogpath refid="resultCatalogPath"/>
      </xmlcatalog>
    </schemavalidate>
    
    <echo>
      Validating URL-based XSDs...
    </echo>
    <schemavalidate failonerror="no" warn="yes" classpathref="saxonClasspath">
      <fileset dir="${docsToValidateDir}/valid/xsdUrl">
        <include name="**/*.xml"/>
        <include name="**/*.dita"/>
        <include name="**/*.ditamap"/>
        <include name="**/*.ditaval"/>
      </fileset>
      <xmlcatalog>
        <catalogpath refid="resultCatalogPath"/>
      </xmlcatalog>
    </schemavalidate>

    <record name="validate-xsds-using-xmlvalidate.log" action="stop"/>
    
  </target>
  
    
</project>