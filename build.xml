<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="help" name="dita-rng2dtdxsd">
  <!-- NOTE: This ant script is implemented against the 3.0.x version
       of the DITA Open Toolkit. It may need adjustment to work
       with other Toolkit versions.
    -->
   
<!--  <property environment="env"/> -->
  <property file=".build.properties"/>
  <property file="build.properties"/>
  <property file="${user.home}/.build.properties"/>
  <property file="${user.home}/build.properties"/>
  
  <property name="xsl.src" location="${basedir}/xsl"/>
  <property name="doctypes.src" location="${basedir}/doctypes"/>
  <property name="plugin.src" location="${basedir}/toolkit_plugins"/>
	<property name="dist"  location="${basedir}/dist"/>
	<property name="plugin.dist"  location="${basedir}/dist/plugins"/>
	<property name="package.dist"  location="${basedir}/dist/package"/>

  <property name="ditaver" description="The DITA version to generate (1.2, 1.3, 2.0, etc.)"
     value="1.3"
  />
  
  
  <fail message="- [ERROR]&#x0a;  Required property dita-ot-dir is not set.&#x0a;  It should be set in your build.properties or&#x0a;  .build.properties file or on the command line&#x0a;  using -Ddita-ot-dir={location of DITA OT}">
    <condition>
      <not>
        <isset property="dita-ot-dir"/>
      </not>
    </condition>
  </fail>

  <property name="doctypesDir" location="${dita-ot-dir}/plugins/org.oasis-open.dita.v1_3"/>
	
	<!-- This is the tools/ dir under the doctypes DIR in the TC-managed
	     source repository.
	  -->
  <property name="toolsDir" location="${basedir}/../../tools"/>
  <property name="javaLibDir" location="${basedir}/lib"/>
  <property name="catalogType" value="'all'"/>
  <!-- The catalogType parameter specifies the type of catlaog
       to be produced:
       
       - 'all' : Entries for each type of schema are included
       - 'dtd' : Only DTD entries
       - 'rng' : Only RNG entries
       - 'rnc' : Only RNC entries
       - 'schema' : The XSDs that use URNs to reference modules
       - 'schema-url' : The XSDs that use URls to reference modules
       
    -->
  
		 
  <property name="outdir" description="Root output directory for the generated files"
      location="${basedir}/build"
   />
  
  <property name="verSpecificOutDir" 
    location="${outdir}/${ditaver}"
  />
  
  <property name="catalogOutDir" description="Directory containing the XML entity resolution catalogs"
   location="${verSpecificOutDir}"
  />
  <echo>catalogOutDir=${catalogOutDir}</echo>
  
  <property name="dtd-outdir" description="Output directory for DTD files"
     location="${verSpecificOutDir}/dtd"
   />
   <property name="xsd-urn-outdir" description="Output directory for URN-based XSD files"
     location="${verSpecificOutDir}/schema"
   />
   <property name="xsd-url-outdir" description="Output directory for URL-based XSD files"
     location="${verSpecificOutDir}/schema-url"
   />
  <property name="rnc-urn-outdir" description="Output directory for URN-based RNC files"
    location="${verSpecificOutDir}/rnc"
  />
  
   <property name="manifestOutputDir" description="Directory to put the generation manifest in" 
     location="${verSpecificOutDir}/generationManifests"
   />
  
  <property name="xslsrc" location="${basedir}/xsl"/>
  <property name="src" description="root source directory for the doctypes"
    location="${doctypesDir}"
  />  
  <property name="rngsrc" description="Parent source dir for all RNG files" 
    location="${src}/rng"
  />
  <property name="foreignsrc" description="Directory containing foreign vocabulary declarations"
    location="${src}/foreign"
  />
  
  <property name="usePublicIDsInShell" value="true"/>
  
  <property name="masterCatalog" location="${dita-ot-dir}/catalog-dita.xml"/>
  
  <property name="dtdGenerationXsl" location="${xslsrc}/rng2ditadtd/rng2ditadtd.xsl"/>
  <property name="catalogGenerationXsl" location="${xslsrc}/rng2catalogs/rng2catalogs.xsl"/>
  <property name="rncGenerationXsl" location="${xslsrc}/rng2ditarnc/rng2ditarnc.xsl"/>
  <property name="xsdGenerationXsl" location="${xslsrc}/rng2ditaxsd/rng2ditaxsd.xsl"/>
  
  <property name="catalogPath" location="${dita-ot-dir}/catalog-dita.xml"/>
   
  <makeurl property="catalogPathUrl" file="${catalogPath}"/>

  <echo>catalogPathUri="${catalogPathUrl}"</echo>
  
  <property name="debug" value="false"/>
  <condition property="doGenerateModules" value="${generateModules}">
    <isset property="generateModules"/>
  </condition>
  <condition property="doGenerateModules" value="false">
    <not>
      <isset property="generateModules"/>
    </not>
  </condition>
  <condition property="doGenerateStandardModules" value="${generateStandardModules}">
    <isset property="generateStandardModules"/>
  </condition>
  <condition property="doGenerateStandardModules" value="false">
    <not>
      <isset property="generateStandardModules"/>
    </not>
  </condition>
  <condition property="doGenerateCatalogs" value="${generateCatalogs}">
    <isset property="generateCatalogs"/>
  </condition>
  <condition property="doGenerateCatalogs" value="false">
    <not>
      <isset property="generateCatalogs"/>
    </not>
  </condition>
  
  <target name="init">
    <echo>outdir=${outdir}</echo>
    <echo>catalogOutDir="${catalogOutDir}"</echo>
		<buildnumber/>
    <tstamp/>
  </target>

  <tstamp>
  	<format property="build-date-time"
  	         pattern="yyyy-MM-dd HH:mm:SSS z"/>
  </tstamp>
	
  	
  <path id="saxonClasspath">
    <fileset dir="${javaLibDir}">
      <include name="**/saxon9*.jar"/>
      <include name="**/xml-resolver*.jar"/>
      <include name="**/resolver*.jar"/>
    </fileset>
  </path>

  <target name="clean">
    <delete failonerror="false">
      <fileset dir="${manifestOutputDir}">
        <include name="**/*"/>
      </fileset>
    </delete>
    <mkdir dir="${verSpecificOutDir}"/>

  </target>
  
 <target name="help">
   <echo>
[generate-all|generate-dtd|generate-catalogs]

  -Drngsrc={directory containing the RELAX NG document type shells to process}
  
  -Doutdir={directory to put the generated files into}
  
  -DcatalogOutDir={directory to put any generated catalogs into}
  
  -DusePublicIDsInShell=[true|FALSE]
  
     Use public IDs (URNs) rather than direct URLs for references to modules from shells.
     
  -DgenerateModules=[true|FALSE]
           
      Generate vocabulary modules in addition to document type shells.
            
   -DgenerateCatalogs=[true|FALSE]
   
      Generate entity resolution catalogs
      
   -DgenerateStandardModules=[true|FALSE]
   
      Generate the standard OASIS-defined modules as well as any other
      modules.
      
   -Dditaver=1.2|1.3|2.0 Default is "1.3"
      
   -D debug=[true|FALSE]
   
      Turns on debug messages.
      
   NOTE: The generate-catalogs target only generates catalogs, it does not
         generate any shells or modules.   
   </echo>
 </target>
  
  <target name="generate-all" 
    description="Generates all shells and modules for both DTD and XSD syntax"
    depends="init, clean, generate-dtd, generate-xsd-url, generate-xsd-urn, generate-catalogs"
    >
    
  </target> 
  
  

  <!-- NOTE: In the XSLT tasks below, I'm not sure that the
       <factory> specification is necessary since we're also
       putting the saxon jar on the classpath. However, it doesn't 
       seem to hurt and may help when the effective class path
       doesn't end up with Saxon first.
    -->
  
  <target name="generate-dtd" description="Generates the DTDs from the RNGs"
    depends="init, clean, generate-catalogs"
    >
<!--  	<echoproperties regex="gen|out|debug|dir|Dir|ditaver|src|do"/>-->
    <!-- NOTE: the -catalog Saxon parameter is not available with Saxon 9.1, so
         this use of Saxon requires a newer version, e.g., 9.6.
      -->
  	<makeurl property="rngsrcUrl" file="${rngsrc}"/>
    <java classname="net.sf.saxon.Transform" failonerror="true"
      classpathref="saxonClasspath"
     >
      <arg line="-o:&quot;${manifestOutputDir}/dtd-generation-manifest.xml&quot;"/>
      <arg line="-it:processDir"/>
<!--      <arg line="-t"/>--><!-- Uncomment this to turn on Saxon version and tracing output -->
      <arg line="-xsl:&quot;${dtdGenerationXsl}&quot;"/>
      <arg line="-catalog:&quot;${catalogPathUrl}&quot;"/>
      <arg line="generateCatalogs=${doGenerateCatalogs}"/>
      <arg line="outdir=&quot;${dtd-outdir}&quot;"/>
      <arg line="usePublicIDsInShell=${usePublicIDsInShell}"/>
      <arg line="ditaVersion=${ditaver}"/>
      <arg line="debug=${debug}"/>
      <arg line="rootDir=&quot;${rngsrcUrl}&quot;"/>
      <arg line="generateModules=${doGenerateModules}"/>
      <arg line="generateStandardModules=${doGenerateStandardModules}"/>
      <arg line="generateCatalogs=${doGenerateCatalogs}"/>
      <arg line="catalogs=&quot;${catalogPathUrl}&quot;"/>
    </java>        
    
  </target>
  
  <target name="generate-xsd-url"
    depends="init, clean"
    >
    <!-- Catalog path is not needed for processing TC-defined RNGs as they 
         use relative URLs, but for non-TC RNGs will need a catalog to resolve
         URNs, e.g., the OT master catalog.
      -->
  	<makeurl property="rngsrcUrl" file="${rngsrc}"/>
    <java classname="net.sf.saxon.Transform" failonerror="true"
      classpathref="saxonClasspath"
      >
      <arg line="-o:${manifestOutputDir}/xsd-url-generation-manifest.xml"/>
      <arg line="-it:processDir"/>
      <arg line="-xsl:${xsdGenerationXsl}"/>
      <arg line="-catalog:${catalogPathUrl}"/>
      <arg line="outdir=${xsd-url-outdir}"/>
      <arg line="useURNsInShell=false"/>
      <arg line="ditaVersion=${ditaver}"/>
      <arg line="debug=${debug}"/>
      <arg line="rootDir=${rngsrcUrl}"/>
      <arg line="generateModules=${doGenerateModules}"/>
      <arg line="generateStandardModules=${doGenerateStandardModules}"/>
      <arg line="generateCatalogs=${doGenerateCatalogs}"/>
      <arg line="catalogs=&quot;${catalogPathUrl}&quot;"/>
    </java>        
    
  </target>

  <target name="generate-xsd-urn"
    depends="init, clean"
    >
  	<makeurl property="rngsrcUrl" file="${rngsrc}"/>

    <java classname="net.sf.saxon.Transform" failonerror="true"
      classpathref="saxonClasspath"
      >
      <arg line="-o:${manifestOutputDir}/xsd-urn-generation-manifest.xml"/>
      <arg line="-it:processDir"/>
      <arg line="-xsl:${xsdGenerationXsl}"/>
      <arg line="-catalog:${catalogPathUrl}"/>
      <arg line="outdir=${xsd-urn-outdir}"/>
      <arg line="useURNsInShell=true"/>
      <arg line="ditaVersion=${ditaver}"/>
      <arg line="debug=${debug}"/>
      <arg line="rootDir=${rngsrcUrl}"/>
      <arg line="generateModules=${doGenerateModules}"/>
      <arg line="generateStandardModules=${doGenerateStandardModules}"/>
      <arg line="catalogs=&quot;${catalogPathUrl}&quot;"/>
    </java>        
  </target>

  <target name="generate-rnc-urn"
    depends="init, clean"
    >
    <echo>- [WARN] RNC generation not yet fully implemented. </echo>
  	<makeurl property="rngsrcUrl" file="${rngsrc}"/>

    <java classname="net.sf.saxon.Transform" failonerror="true"
      classpathref="saxonClasspath"
      >
      <arg line="-o:${manifestOutputDir}/rnc-urn-generation-manifest.xml"/>
      <arg line="-it:processDir"/>
      <arg line="-xsl:${rncGenerationXsl}"/>
      <arg line="-catalog:${catalogPathUrl}"/>
      <arg line="outdir=${rnc-urn-outdir}"/>
      <arg line="usePublicIDsInShell=true"/>
      <arg line="ditaVersion=${ditaver}"/>
      <arg line="debug=${debug}"/>
      <arg line="rootDir=${rngsrcUrl}"/>
      <arg line="generateModules=${doGenerateModules}"/>
      <arg line="generateStandardModules=${doGenerateStandardModules}"/>
      <arg line="catalogs=&quot;${catalogPathUrl}&quot;"/>
    </java>        
  </target>
  
  <target name="generate-catalogs" description="Generate all the entity resolution catalogs for a specific DITA version"
    depends="init, clean"
    if="${doGenerateCatalogs}"
    >
  	<makeurl property="rngsrcUrl" file="${rngsrc}"/>

    <java classname="net.sf.saxon.Transform" failonerror="true"
      classpathref="saxonClasspath"
      >
      <arg line="-xsl:&quot;${catalogGenerationXsl}&quot;"/>
      <arg line="-it:processDir"/>
      <arg line="-catalog:&quot;${catalogPathUrl}&quot;"/>
      <arg line="rootDir=&quot;${rngsrcUrl}&quot;"/>
      <arg line="ditaVersion=${ditaver}"/>
      <arg line="outdir=&quot;${verSpecificOutDir}&quot;"/>
      <arg line="catalogType=${catalogType}"/>
      <arg line="catalogs=&quot;${catalogPathUrl}&quot;"/>
    </java>
  </target>
  

</project>
